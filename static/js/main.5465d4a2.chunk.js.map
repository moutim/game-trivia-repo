{"version":3,"sources":["trivia.png","hourglass.png","services/tokenAPI.js","redux/actions/tokenAction.js","redux/actions/actionsType.js","redux/actions/actionUser.js","pages/Login.jsx","redux/actions/playerAction.js","pages/Settings.jsx","components/Header.jsx","services/questionsAPI.js","components/AlternativeButtons.jsx","components/QuestionInfo.jsx","components/Timer.jsx","pages/ScreenGame.jsx","pages/Feedback.jsx","pages/Ranking.jsx","App.js","serviceWorker.js","redux/reducers/reducerLogin.js","redux/reducers/reducerToken.js","redux/reducers/reducerPlayer.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","getToken","a","fetch","result","json","data","localStorage","setItem","token","fetchToken","dispatch","getTokenAPI","type","payload","addUser","Login","state","email","name","isDisable","redirect","isValidInfo","setState","handleButtonPlay","props","sendToken","sendUser","sendPlayer","cleaningScore","handleInputChange","target","value","id","this","redirectToSettings","history","className","to","src","triviaImg","alt","htmlFor","data-testid","placeholder","onChange","disabled","onClick","push","Component","connect","infoUser","infoPlayer","nameUser","score","Settings","Header","linkImage","fetchInfoGravatar","reducerLogin","sendPictureGravatar","hash","md5","toString","player","logoTrivia","url","requestQuestions","fetchQuestionsAPI","response_code","newToken","getItem","questions","AlternativeButtons","formulaScore","difficulty","timer","handleSelectAnswer","correctAnswer","sendScore","sendAssertions","answerWasClicked","playerInfo","scorePoints","picture","JSON","stringify","shuffleQuestions","isDisabledButton","wasClicked","map","item","index","key","defaultProps","QuestionInfo","questionNumber","category","Timer","hourglass","ScreenGame","currentQuestion","isShow","countdown","intervalTime","setInterval","prevState","setTimeout","clearInterval","fetchQuestions","results","correct_answer","incorrectAnswers","incorrect_answers","questionsArray","handleButtonNextShow","handleButtonNextQuestion","plus1","array","arrayShuffle","question","console","log","dangerouslySetInnerHTML","__html","Feedback","feedBackMessage","handleButtonPlayAgain","handleLocalStorage","playersRanking","parse","sort","b","assertions","pictureGravatar","Ranking","rankingUser","rank","App","exact","path","component","Boolean","window","location","hostname","match","innitialLogin","action","initialState","gravatarEmail","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5465d4a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","module.exports = __webpack_public_path__ + \"static/media/hourglass.7d6c26b4.png\";","const getToken = async () => {\n  const result = await fetch('https://opentdb.com/api_token.php?command=request');\n  const data = await result.json();\n\n  localStorage.setItem('token', data.token);\n\n  return data;\n};\n\nexport default getToken;\n","import getToken from '../../services/tokenAPI';\nimport {\n  GET_TOKEN_SUCCESS,\n} from './actionsType';\n\nconst getTokenSuccess = (token) => ({\n  type: GET_TOKEN_SUCCESS,\n  payload: token,\n});\n\nconst fetchToken = () => async (dispatch) => {\n  const getTokenAPI = await getToken();\n  dispatch(getTokenSuccess(getTokenAPI));\n};\n\nexport default fetchToken;\n","export const ADD_USER = 'ADD_USER';\n\nexport const GET_TOKEN_SUCCESS = 'GET_TOKEN_SUCCESS';\n\nexport const SEND_SCORE = 'SEND_SCORE';\n\nexport const SEND_ASSERTIONS = 'SEND_ASSERTIONS';\n\nexport const SEND_PICTURE_GRAVATAR = 'SEND_PICTURE_GRAVATAR';\n\nexport const CLEAR_SCORE = 'CLEAR_SCORE';\n","import { ADD_USER } from './actionsType';\n\nconst addUser = (payload) => ({ type: ADD_USER, payload });\n\nexport default addUser;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport fetchToken from '../redux/actions/tokenAction';\nimport addUser from '../redux/actions/actionUser';\nimport { addPlayer, clearScore } from '../redux/actions/playerAction';\nimport triviaImg from '../trivia.png';\nimport './Login.css';\n\nclass Login extends Component {\n    state = {\n      email: '',\n      name: '',\n      isDisable: true,\n      redirect: false,\n    }\n\n    isValidInfo = () => {\n      const { email, name } = this.state;\n\n      if (email && name) {\n        this.setState({ isDisable: false });\n      } else this.setState({ isDisable: true });\n    }\n\n    handleButtonPlay = async () => {\n      const { name, email } = this.state;\n      const { sendToken, sendUser, sendPlayer, cleaningScore } = this.props;\n      // Agora nossa funcao sendToken ja adiciona o token no localStorage, logo nao precisamos inserir ele por aqui\n      await sendToken();\n      sendUser({ name, email });\n      sendPlayer({ name, email });\n      this.setState({ redirect: true });\n      cleaningScore(0);\n    }\n\n    handleInputChange = ({ target: { value, id } }) => {\n      this.setState({ [id]: value }, this.isValidInfo);\n    }\n\n    render() {\n      const {\n        redirectToSettings,\n        history,\n      } = this.props;\n\n      const {\n        name,\n        email,\n        isDisable,\n        redirect,\n      } = this.state;\n\n      return (\n        <main className=\"mainLogin\">\n          { redirect && <Redirect to=\"/screenGame\" /> }\n\n          <img src={ triviaImg } alt=\"Titulo Trivia\" className=\"triviaImg\" />\n\n          <div className=\"containerInputs\">\n            <h2>Login</h2>\n\n            <div className=\"userInputs\">\n              <label htmlFor=\"name\">\n                <i className=\"fa-solid fa-user\" />\n                <input\n                  value={ name }\n                  data-testid=\"input-player-name\"\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Name\"\n                  onChange={ this.handleInputChange }\n                />\n              </label>\n\n              <label htmlFor=\"email\">\n                <i className=\"fa-solid fa-envelope\" />\n                <input\n                  value={ email }\n                  data-testid=\"input-gravatar-email\"\n                  type=\"text\"\n                  name=\"email\"\n                  id=\"email\"\n                  placeholder=\"Email\"\n                  onChange={ this.handleInputChange }\n                />\n              </label>\n\n              <div className=\"userButtons\">\n                <button\n                  data-testid=\"btn-play\"\n                  disabled={ isDisable }\n                  type=\"button\"\n                  onClick={ this.handleButtonPlay }\n                >\n                  Play\n                </button>\n\n                <button\n                  data-testid=\"btn-settings\"\n                  onClick={ () => {\n                    redirectToSettings(name);\n                    history.push('/settings');\n                  } }\n                  type=\"button\"\n                >\n                  Settings\n                </button>\n              </div>\n            </div>\n          </div>\n        </main>\n      );\n    }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  redirectToSettings: PropTypes.func.isRequired,\n  sendToken: PropTypes.func.isRequired,\n  sendUser: PropTypes.func.isRequired,\n  sendPlayer: PropTypes.func.isRequired,\n  cleaningScore: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendToken: () => dispatch(fetchToken()),\n  sendUser: (infoUser) => dispatch(addUser(infoUser)),\n  sendPlayer: (infoPlayer) => dispatch(addPlayer(infoPlayer)),\n  redirectToSettings: (nameUser) => dispatch(addUser(nameUser)),\n  cleaningScore: (score) => dispatch(clearScore(score)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import {\n  ADD_USER,\n  SEND_SCORE,\n  SEND_ASSERTIONS,\n  SEND_PICTURE_GRAVATAR,\n  CLEAR_SCORE } from './actionsType';\n\nexport const addPlayer = (payload) => ({ type: ADD_USER, payload });\n\nexport const addScore = (payload) => ({ type: SEND_SCORE, payload });\n\nexport const addAssertions = () => ({ type: SEND_ASSERTIONS });\n\nexport const addGravatarPicture = (payload) => ({ type: SEND_PICTURE_GRAVATAR, payload });\n\nexport const clearScore = (payload) => ({ type: CLEAR_SCORE, payload });\n","import React, { Component } from 'react';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <h1 data-testid=\"settings-title\">Settings</h1>\n    );\n  }\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Header.css';\nimport logoTrivia from '../trivia.png';\nimport { addGravatarPicture } from '../redux/actions/playerAction';\n\nclass Header extends Component {\n    state = {\n      name: '',\n      linkImage: '',\n    }\n\n    componentDidMount() {\n      this.fetchInfoGravatar();\n    }\n\n    fetchInfoGravatar = async () => {\n      const { reducerLogin: { email, name }, sendPictureGravatar } = this.props;\n      const hash = md5(email).toString();\n      const linkImage = `https://www.gravatar.com/avatar/${hash}`;\n      sendPictureGravatar(linkImage);\n      this.setState({ linkImage, name });\n    }\n\n    render() {\n      const { name, linkImage } = this.state;\n      const { player: { score } } = this.props;\n      return (\n        <header>\n          <div>\n            <img\n              data-testid=\"header-profile-picture\"\n              src={ linkImage }\n              alt=\"User avatar Gravatar\"\n            />\n            <p\n              data-testid=\"header-player-name\"\n            >\n              Player:\n              <span className=\"highlightedText\">{ name }</span>\n            </p>\n          </div>\n          <img className=\"logoTrivia\" src={ logoTrivia } alt=\"Logo Trivia\" />\n          <p\n            className=\"score-points\"\n          >\n            {'Score:'}\n            {' '}\n            <span className=\"highlightedText\" data-testid=\"header-score\">{ score }</span>\n          </p>\n        </header>\n      );\n    }\n}\n\nHeader.propTypes = {\n  reducerLogin: PropTypes.shape({\n    email: PropTypes.string,\n    name: PropTypes.string,\n  }).isRequired,\n  sendPictureGravatar: PropTypes.func.isRequired,\n  player: PropTypes.shape({\n    score: PropTypes.number,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => state;\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendPictureGravatar: (url) => dispatch(addGravatarPicture(url)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import getToken from './tokenAPI';\n\nconst requestQuestions = async (token) => {\n  const result = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const data = await result.json();\n\n  return data;\n};\n\nconst fetchQuestionsAPI = async (token) => {\n  const data = await requestQuestions(token);\n\n  const expirateCodeToken = 3;\n\n  if (data.response_code === expirateCodeToken) {\n    await getToken();\n    const newToken = localStorage.getItem('token');\n    const questions = requestQuestions(newToken);\n    return questions;\n  } return data;\n};\n\nexport default fetchQuestionsAPI;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './AlternativeButtons.css';\nimport { connect } from 'react-redux';\nimport { addScore, addAssertions } from '../redux/actions/playerAction';\n\nclass AlternativeButtons extends Component {\n    formulaScore = (difficulty, timer) => {\n      const formulaBase = 10;\n      const easy = 1;\n      const medium = 2;\n      const hard = 3;\n      if (difficulty === 'easy') { return formulaBase + (timer * easy); }\n      if (difficulty === 'medium') { return formulaBase + (timer * medium); }\n      if (difficulty === 'hard') { return formulaBase + (timer * hard); }\n    }\n\n    handleSelectAnswer = ({ target: { id } }) => {\n      const {\n        correctAnswer,\n        difficulty,\n        timer,\n        sendScore,\n        sendAssertions,\n        answerWasClicked,\n      } = this.props;\n\n      let score = 0;\n      if (correctAnswer === id) {\n        score = this.formulaScore(difficulty, timer);\n        sendScore(score);\n        sendAssertions();\n      }\n\n      const { name, scorePoints, picture } = this.props;\n      const playerInfo = [{ name, score: scorePoints, picture }];\n      localStorage.setItem('ranking', JSON.stringify(playerInfo));\n      answerWasClicked();\n    }\n\n    render() {\n      const {\n        shuffleQuestions,\n        correctAnswer,\n        isDisabledButton,\n        wasClicked,\n      } = this.props;\n\n      return (\n        <>\n          {\n            shuffleQuestions.map((item, index) => {\n              if (item === correctAnswer) {\n                return (\n                  <button\n                    key={ item }\n                    data-testid=\"correct-answer\"\n                    type=\"button\"\n                    className={ wasClicked ? 'correctAnswer' : 'alternativeButton' }\n                    onClick={ this.handleSelectAnswer }\n                    id={ item }\n                    disabled={ isDisabledButton }\n\n                  >\n                    { item }\n                  </button>);\n              } return (\n                <button\n                  key={ item }\n                  data-testid={ `wrong-answer-${index}` }\n                  type=\"button\"\n                  className={ wasClicked ? 'wrongAnswer' : 'alternativeButton' }\n                  onClick={ this.handleSelectAnswer }\n                  id={ item }\n                  disabled={ isDisabledButton }\n\n                >\n                  { item }\n                </button>\n              );\n            })\n          }\n        </>\n      );\n    }\n}\n\nAlternativeButtons.propTypes = {\n  shuffleQuestions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  correctAnswer: PropTypes.string,\n  difficulty: PropTypes.string.isRequired,\n  timer: PropTypes.number.isRequired,\n  sendScore: PropTypes.func.isRequired,\n  sendAssertions: PropTypes.func.isRequired,\n  isDisabledButton: PropTypes.bool.isRequired,\n  answerWasClicked: PropTypes.func.isRequired,\n  wasClicked: PropTypes.bool.isRequired,\n};\n\nAlternativeButtons.defaultProps = {\n  correctAnswer: '',\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendScore: (score) => dispatch(addScore(score)),\n  sendAssertions: () => dispatch(addAssertions()),\n});\n\nexport default connect(null, mapDispatchToProps)(AlternativeButtons);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass QuestionInfo extends Component {\n  render() {\n    const { questionNumber, category, difficulty } = this.props;\n    return (\n      <div className=\"question-info\">\n        <h1>{`Question number ${questionNumber + 1}`}</h1>\n        <h2 data-testid=\"question-category\">{ `Category: ${category}` }</h2>\n        <h4>{ `Difficulty: ${difficulty}` }</h4>\n      </div>\n    );\n  }\n}\n\nQuestionInfo.propTypes = {\n  questionNumber: PropTypes.number.isRequired,\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n};\n\nexport default QuestionInfo;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport hourglass from '../hourglass.png';\nimport './Timer.css';\n\nexport class Timer extends Component {\n  render() {\n    const { timer } = this.props;\n    return (\n      <div className=\"box-timer\">\n        <img className=\"rotate\" src={ hourglass } alt=\"desenho de uma ampulhera\" />\n        <p>{ timer }</p>\n      </div>\n    );\n  }\n}\n\nTimer.propTypes = {\n  timer: PropTypes.number.isRequired,\n};\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport arrayShuffle from 'array-shuffle';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport fetchQuestionsAPI from '../services/questionsAPI';\nimport AlternativeButtons from '../components/AlternativeButtons';\nimport './ScreenGame.css';\nimport QuestionInfo from '../components/QuestionInfo';\nimport Timer from '../components/Timer';\n\nclass ScreenGame extends Component {\n  state = {\n    questionNumber: 0,\n    questions: [],\n    currentQuestion: {},\n    isShow: false,\n    wasClicked: false,\n    isDisabledButton: false,\n    timer: 30,\n    shuffleQuestions: [],\n  }\n\n  componentDidMount() {\n    this.fetchQuestions();\n    this.countdown();\n  }\n\n  countdown = () => {\n    const { isDisabledButton, timer } = this.state;\n    const THIRTY_SECONDS = 30000;\n    const ONE_SECOND = 1000;\n\n    const intervalTime = setInterval(() => {\n      if (isDisabledButton === false && timer > 0) {\n        this.setState((prevState) => ({\n          timer: prevState.timer - 1,\n          isDisabledButton: false,\n        }));\n      }\n    }, ONE_SECOND);\n\n    setTimeout(() => {\n      if (timer === 0) {\n        this.setState({ isDisabledButton: true });\n        clearInterval(intervalTime);\n      }\n    }, THIRTY_SECONDS);\n  }\n\n  fetchQuestions = async () => {\n    const token = localStorage.getItem('token');\n    const { results } = await fetchQuestionsAPI(token);\n    this.setState({ currentQuestion: results[0], questions: results });\n\n    const { currentQuestion: {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } } = this.state;\n\n    let questionsArray = [];\n    questionsArray = [correctAnswer, ...incorrectAnswers];\n\n    const shuffleQuestions = this.shuffleQuestions(questionsArray);\n\n    this.setState({ shuffleQuestions });\n  }\n\n  handleButtonNextShow = () => {\n    this.setState({\n      isShow: true,\n    });\n  }\n\n  answerWasClicked = () => {\n    this.setState({\n      wasClicked: true,\n      isShow: true,\n    });\n  }\n\n  handleButtonNextQuestion = () => {\n    const { questions, questionNumber } = this.state;\n    const { history } = this.props;\n    const lastQuestion = 4;\n    if (questionNumber === lastQuestion) return history.push('/feedback');\n    const plus1 = questionNumber + 1;\n\n    const {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } = questions[plus1];\n\n    const questionsArray = [correctAnswer, ...incorrectAnswers];\n    const shuffleQuestions = this.shuffleQuestions(questionsArray);\n    // this.countdown();\n    this.setState({\n      shuffleQuestions,\n      currentQuestion: questions[plus1],\n      wasClicked: false,\n      isShow: false,\n      questionNumber: plus1,\n      timer: 30,\n    });\n  }\n\n  // ref: https://www.npmjs.com/package/array-shuffle\n  shuffleQuestions = (array) => arrayShuffle(array);\n\n  render() {\n    const {\n      currentQuestion: {\n        category,\n        question,\n        correct_answer: correctAnswer,\n        difficulty,\n      },\n      isShow,\n      wasClicked,\n      shuffleQuestions,\n      isDisabledButton,\n      timer,\n      questionNumber,\n    } = this.state;\n    console.log(timer);\n    return (\n      <>\n        <Header />\n        <main>\n\n          <section className=\"card\">\n            <div className=\"container-info\">\n              <QuestionInfo\n                questionNumber={ questionNumber }\n                category={ category }\n                difficulty={ difficulty }\n              />\n            </div>\n            <h3\n              dangerouslySetInnerHTML={ { __html: question } }\n              data-testid=\"question-text\"\n            />\n            <div className=\"alternative-box\" data-testid=\"answer-options\">\n              <AlternativeButtons\n                wasClicked={ wasClicked }\n                answerWasClicked={ this.answerWasClicked }\n                shuffleQuestions={ shuffleQuestions }\n                correctAnswer={ correctAnswer }\n                timer={ timer }\n                difficulty={ difficulty }\n                isDisabledButton={ isDisabledButton }\n              />\n            </div>\n            <div className=\"container-timer\">\n              <Timer timer={ timer } />\n              {\n                isShow || timer === 0 ? (\n                  <button\n                    type=\"button\"\n                    onClick={ this.handleButtonNextQuestion }\n                    className=\"buttonNext\"\n                    data-testid=\"btn-next\"\n                  >\n                    <i className=\"arrow fa-solid fa-right-long\" />\n                  </button>)\n                  : false\n              }\n            </div>\n          </section>\n\n        </main>\n      </>\n    );\n  }\n}\n\nScreenGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default ScreenGame;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\n\nclass Feedback extends Component {\n  state = {\n    feedBackMessage: '',\n  }\n\n  componentDidMount() {\n    let feedBackMessage;\n    const than3 = 3;\n\n    const { assertions } = this.props;\n\n    if (assertions < than3) feedBackMessage = 'Could be better...';\n    if (assertions >= than3) feedBackMessage = 'Well Done!';\n\n    this.setState({ feedBackMessage });\n    this.handleLocalStorage();\n  }\n\n  handleButtonPlayAgain = () => {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  // Referencie: https://medium.com/@lameckanao/armazenando-e-manipulando-dados-no-localstorage-7bcc901ba12b\n  handleLocalStorage = () => {\n    const { name, score, picture } = this.props;\n    if (localStorage.getItem('ranking') === null) {\n      localStorage.setItem('ranking', JSON.stringify([{ name, score, picture }]));\n    } else {\n      const playersRanking = [\n        ...JSON.parse(localStorage.getItem('ranking')), { name, score, picture },\n      ];\n      playersRanking.sort((a, b) => b.score - a.score);\n      localStorage.setItem('ranking', JSON.stringify(playersRanking));\n    }\n  }\n\n  render() {\n    const { feedBackMessage } = this.state;\n    const { assertions, score, history } = this.props;\n    return (\n      <>\n        <Header />\n        <main>\n          <h2>Feedback about your Trivia match</h2>\n\n          <h3>\n            {'In this match you scored '}\n            <span data-testid=\"feedback-total-score\">{ score }</span>\n            {' points!'}\n          </h3>\n\n          <h3>\n            {'You got '}\n            <span data-testid=\"feedback-total-question\">{ assertions }</span>\n            {' quetions right, '}\n            <span data-testid=\"feedback-text\">{ feedBackMessage }</span>\n          </h3>\n\n          <button\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={ this.handleButtonPlayAgain }\n          >\n            Play Again\n          </button>\n\n          <button\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            onClick={ () => {\n              history.push('/ranking');\n            } }\n          >\n            Ranking\n          </button>\n        </main>\n      </>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n  name: state.player.name,\n  picture: state.player.pictureGravatar,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Ranking extends Component {\n  handleButtonPlayAgain = () => {\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  render() {\n    const rankingUser = JSON.parse(localStorage.getItem('ranking'));\n    return (\n      <>\n\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        {\n          rankingUser.map((rank, index) => (\n\n            <ul key={ index }>\n              <img src={ rank.picture } alt=\"User from Gravatar\" />\n              <p data-testid={ `player-name-${index}` }>{ rank.name }</p>\n              <span data-testid={ `player-score-${index}` }>{ rank.score }</span>\n            </ul>\n          ))\n        }\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.handleButtonPlayAgain }\n        >\n          Voltar à Tela inicial\n        </button>\n      </>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n  picture: state.player.pictureGravatar,\n});\n\nexport default connect(mapStateToProps)(Ranking);\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport ScreenGame from './pages/ScreenGame';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/settings\" component={ Settings } />\n      <Route path=\"/screenGame\" component={ ScreenGame } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_USER } from '../actions/actionsType';\n\nconst innitialLogin = {\n  email: '',\n  name: '',\n};\n\nconst reducerLogin = (state = innitialLogin, action) => {\n  switch (action.type) {\n  case ADD_USER:\n    return {\n      ...state,\n      email: action.payload.email,\n      name: action.payload.name,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default reducerLogin;\n","import {\n  GET_TOKEN_SUCCESS,\n} from '../actions/actionsType';\n\nconst token = (state = '', action) => {\n  switch (action.type) {\n  case GET_TOKEN_SUCCESS:\n    return action.payload.token;\n  default:\n    return state;\n  }\n};\n\nexport default token;\n","import {\n  SEND_SCORE,\n  SEND_ASSERTIONS,\n  ADD_USER,\n  SEND_PICTURE_GRAVATAR,\n  CLEAR_SCORE,\n} from '../actions/actionsType';\n\nconst initialState = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  pictureGravatar: '',\n};\n\nconst player = (state = initialState, action) => {\n  switch (action.type) {\n  case ADD_USER:\n    return {\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.email,\n    };\n  case SEND_PICTURE_GRAVATAR:\n    return {\n      ...state,\n      pictureGravatar: action.payload,\n    };\n  case SEND_SCORE:\n    return {\n      ...state,\n      score: state.score + action.payload,\n    };\n  case SEND_ASSERTIONS:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  case CLEAR_SCORE:\n    return {\n      ...state,\n      score: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport reducerLogin from './reducerLogin';\nimport token from './reducerToken';\nimport player from './reducerPlayer';\n\nconst rootReducer = combineReducers({ reducerLogin, token, player });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}